{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":37407,"databundleVersionId":4530214,"sourceType":"competition"},{"sourceId":8636242,"sourceType":"datasetVersion","datasetId":5171588}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\ntrain = pd.read_csv(\"/kaggle/input/big-data-analytics-certification-kr-2022/train.csv\")\ntest = pd.read_csv(\"/kaggle/input/big-data-analytics-certification-kr-2022/test.csv\")\ntrain.shape, test.shape #((6665, 28), (2154, 28))\ntrain = pd.get_dummies(train)\ntest = pd.get_dummies(test)\ntest.head()\n\ntarget = train.pop(\"Segmentation\")\nID = test.pop(\"ID\")\ntrain = train.drop(\"ID\", axis = 1)\ntrain.info()\ntest.info()\n\nfrom sklearn.model_selection import train_test_split\nx_tr, x_val, y_tr, y_val = train_test_split(train, target, test_size = 0.2, random_state = 0)\nx_tr.shape, x_val.shape, y_tr.shape, y_val.shape #((5332, 28), (1333, 28), (5332,), (1333,))\n\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(random_state = 0)\nrf.fit(x_tr, y_tr)\npred = rf.predict(x_val)\n\nfrom sklearn.metrics import f1_score\nf1_score_macro = f1_score(y_val, pred, average = \"macro\")\nprint(f1_score_macro) #0.4916279541592357\n\npred2 = rf.predict(test)\n\nsubmission = pd.DataFrame({\"ID\" : ID, \"Segmentation\" : pred2}).to_csv(\"submission.csv\", index= False)\npd.read_csv(\"submission.csv\")","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-08T03:09:37.395661Z","iopub.execute_input":"2024-06-08T03:09:37.396127Z","iopub.status.idle":"2024-06-08T03:09:38.576833Z","shell.execute_reply.started":"2024-06-08T03:09:37.396089Z","shell.execute_reply":"2024-06-08T03:09:38.575279Z"},"trusted":true},"execution_count":45,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 6665 entries, 0 to 6664\nData columns (total 28 columns):\n #   Column                    Non-Null Count  Dtype  \n---  ------                    --------------  -----  \n 0   Age                       6665 non-null   int64  \n 1   Work_Experience           6665 non-null   float64\n 2   Family_Size               6665 non-null   float64\n 3   Gender_Female             6665 non-null   bool   \n 4   Gender_Male               6665 non-null   bool   \n 5   Ever_Married_No           6665 non-null   bool   \n 6   Ever_Married_Yes          6665 non-null   bool   \n 7   Graduated_No              6665 non-null   bool   \n 8   Graduated_Yes             6665 non-null   bool   \n 9   Profession_Artist         6665 non-null   bool   \n 10  Profession_Doctor         6665 non-null   bool   \n 11  Profession_Engineer       6665 non-null   bool   \n 12  Profession_Entertainment  6665 non-null   bool   \n 13  Profession_Executive      6665 non-null   bool   \n 14  Profession_Healthcare     6665 non-null   bool   \n 15  Profession_Homemaker      6665 non-null   bool   \n 16  Profession_Lawyer         6665 non-null   bool   \n 17  Profession_Marketing      6665 non-null   bool   \n 18  Spending_Score_Average    6665 non-null   bool   \n 19  Spending_Score_High       6665 non-null   bool   \n 20  Spending_Score_Low        6665 non-null   bool   \n 21  Var_1_Cat_1               6665 non-null   bool   \n 22  Var_1_Cat_2               6665 non-null   bool   \n 23  Var_1_Cat_3               6665 non-null   bool   \n 24  Var_1_Cat_4               6665 non-null   bool   \n 25  Var_1_Cat_5               6665 non-null   bool   \n 26  Var_1_Cat_6               6665 non-null   bool   \n 27  Var_1_Cat_7               6665 non-null   bool   \ndtypes: bool(25), float64(2), int64(1)\nmemory usage: 319.1 KB\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2154 entries, 0 to 2153\nData columns (total 28 columns):\n #   Column                    Non-Null Count  Dtype  \n---  ------                    --------------  -----  \n 0   Age                       2154 non-null   int64  \n 1   Work_Experience           2154 non-null   float64\n 2   Family_Size               2154 non-null   float64\n 3   Gender_Female             2154 non-null   bool   \n 4   Gender_Male               2154 non-null   bool   \n 5   Ever_Married_No           2154 non-null   bool   \n 6   Ever_Married_Yes          2154 non-null   bool   \n 7   Graduated_No              2154 non-null   bool   \n 8   Graduated_Yes             2154 non-null   bool   \n 9   Profession_Artist         2154 non-null   bool   \n 10  Profession_Doctor         2154 non-null   bool   \n 11  Profession_Engineer       2154 non-null   bool   \n 12  Profession_Entertainment  2154 non-null   bool   \n 13  Profession_Executive      2154 non-null   bool   \n 14  Profession_Healthcare     2154 non-null   bool   \n 15  Profession_Homemaker      2154 non-null   bool   \n 16  Profession_Lawyer         2154 non-null   bool   \n 17  Profession_Marketing      2154 non-null   bool   \n 18  Spending_Score_Average    2154 non-null   bool   \n 19  Spending_Score_High       2154 non-null   bool   \n 20  Spending_Score_Low        2154 non-null   bool   \n 21  Var_1_Cat_1               2154 non-null   bool   \n 22  Var_1_Cat_2               2154 non-null   bool   \n 23  Var_1_Cat_3               2154 non-null   bool   \n 24  Var_1_Cat_4               2154 non-null   bool   \n 25  Var_1_Cat_5               2154 non-null   bool   \n 26  Var_1_Cat_6               2154 non-null   bool   \n 27  Var_1_Cat_7               2154 non-null   bool   \ndtypes: bool(25), float64(2), int64(1)\nmemory usage: 103.2 KB\n0.4916279541592357\n","output_type":"stream"},{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"          ID  Segmentation\n0     458989             2\n1     458994             3\n2     459000             3\n3     459003             3\n4     459005             3\n...      ...           ...\n2149  467950             1\n2150  467954             4\n2151  467958             2\n2152  467961             3\n2153  467968             4\n\n[2154 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>Segmentation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>458989</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>458994</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>459000</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>459003</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>459005</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2149</th>\n      <td>467950</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2150</th>\n      <td>467954</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2151</th>\n      <td>467958</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2152</th>\n      <td>467961</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2153</th>\n      <td>467968</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n<p>2154 rows Ã— 2 columns</p>\n</div>"},"metadata":{}}]}]}