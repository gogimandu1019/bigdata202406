{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":77845,"databundleVersionId":8550922,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\ntrain = pd.read_csv(\"/kaggle/input/2024-4-big-data-analytics-certification-kr/train.csv\")\ntest = pd.read_csv(\"/kaggle/input/2024-4-big-data-analytics-certification-kr/test.csv\")\n\n#train.head() #id/ Sex / Length/  Diameter / Height / Weight  /Shucked Weight / Viscera Weight  /Shell Weight /  Age  \n#test.head() #age빼고 나머지\n#train.info() #sex만 object, 나머지는 float\n#test.info()\n#train.isnull().sum() - 결측값 없음\n#test.isnull().sum() - 결측값 없음\ntrain.shape , test.shape #((15000, 10), (10000, 9))\n\ntarget = train.pop('Age') #타겟값은 별도보관\ntest_id = test.pop('id') #id가 제출 양식에서 필요하므로 일단 따로 뺌\n\ntrain = train.drop(columns = 'id') #id 필요없어서, 그거 뺀 나머지를 사용\n\ntrain = pd.get_dummies(train)\ntest = pd.get_dummies(test)\ntrain.head()\ntest.head()\ntrain.shape, test.shape\n\nfrom sklearn.model_selection import train_test_split\nx_tr, x_val, y_tr, y_val = train_test_split(train, target, test_size = 0.2, random_state = 0)\nx_tr.shape, x_val.shape, y_tr.shape, y_val.shape #((12000, 10), (3000, 10), (12000,), (3000,))\n\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor()\nmodel.fit(x_tr, y_tr)\npred = model.predict(x_val)\npred\n\nfrom sklearn.metrics import mean_absolute_error\n#dir(metrics)\n#help(mean_absolute_error)\nmae = mean_absolute_error(y_val, pred)\nmae #1.376250972222222\n\npred = model.predict(test)\nsubmission = pd.DataFrame({'id' : test_id,'yield' : pred}).to_csv('result.csv', index = False)\nsubmission\npd.read_csv('result.csv')","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-06T03:50:02.628340Z","iopub.execute_input":"2024-06-06T03:50:02.628702Z","iopub.status.idle":"2024-06-06T03:50:08.821756Z","shell.execute_reply.started":"2024-06-06T03:50:02.628677Z","shell.execute_reply":"2024-06-06T03:50:08.820798Z"},"trusted":true},"execution_count":74,"outputs":[{"execution_count":74,"output_type":"execute_result","data":{"text/plain":"         id  yield\n0     15000   8.77\n1     15001   9.41\n2     15002   8.80\n3     15003  10.70\n4     15004   8.71\n...     ...    ...\n9995  24995  13.00\n9996  24996   7.82\n9997  24997   8.59\n9998  24998  14.34\n9999  24999  10.40\n\n[10000 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>yield</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>15000</td>\n      <td>8.77</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15001</td>\n      <td>9.41</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>15002</td>\n      <td>8.80</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>15003</td>\n      <td>10.70</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>15004</td>\n      <td>8.71</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9995</th>\n      <td>24995</td>\n      <td>13.00</td>\n    </tr>\n    <tr>\n      <th>9996</th>\n      <td>24996</td>\n      <td>7.82</td>\n    </tr>\n    <tr>\n      <th>9997</th>\n      <td>24997</td>\n      <td>8.59</td>\n    </tr>\n    <tr>\n      <th>9998</th>\n      <td>24998</td>\n      <td>14.34</td>\n    </tr>\n    <tr>\n      <th>9999</th>\n      <td>24999</td>\n      <td>10.40</td>\n    </tr>\n  </tbody>\n</table>\n<p>10000 rows × 2 columns</p>\n</div>"},"metadata":{}}]}]}