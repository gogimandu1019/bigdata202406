{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3948,"databundleVersionId":32624,"sourceType":"competition"}],"dockerImageVersionId":30301,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## Baseline code\n\n- target: count컬럼","metadata":{}},{"cell_type":"code","source":"import pandas as pd","metadata":{"_uuid":"051d70d956493feee0c6d64651c6a088724dca2a","_execution_state":"idle","execution":{"iopub.status.busy":"2024-06-15T05:54:21.518730Z","iopub.execute_input":"2024-06-15T05:54:21.519167Z","iopub.status.idle":"2024-06-15T05:54:21.525166Z","shell.execute_reply.started":"2024-06-15T05:54:21.519131Z","shell.execute_reply":"2024-06-15T05:54:21.523654Z"},"trusted":true},"execution_count":67,"outputs":[]},{"cell_type":"code","source":"train = pd.read_csv(\"/kaggle/input/bike-sharing-demand/train.csv\")\ntest = pd.read_csv(\"/kaggle/input/bike-sharing-demand/test.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:54:21.532812Z","iopub.execute_input":"2024-06-15T05:54:21.533925Z","iopub.status.idle":"2024-06-15T05:54:21.575939Z","shell.execute_reply.started":"2024-06-15T05:54:21.533867Z","shell.execute_reply":"2024-06-15T05:54:21.574556Z"},"trusted":true},"execution_count":68,"outputs":[]},{"cell_type":"code","source":"# train.head()\n# train.info()\n# test.head()\n# test.info() #datetime 이 object, 외에는 모두 수치형 변수\n# print(train.shape, test.shape) #(10886, 12) (6493, 9)\n#casual, registered 는 test에 없음 ; drop\n#우리가 예측해야 할 칼럼 = count\ntrain['datetime'] = pd.to_datetime(train['datetime'])\ntest['datetime'] = pd.to_datetime(test['datetime'])\n\n#datetime 형태로 랜포에 넣을 수 없는 문제를 발견함\n#원래 형식이 object인데 yyyy-mm-dd hh:mm:ss 꼴이라서 이건 뭐 인코딩도 못하네?\n#year / month / day / hour 까지 살리고 datetime을 드랍해보자\ntrain['year'] = train['datetime'].dt.year\ntrain['month'] = train['datetime'].dt.month\ntrain['day'] = train['datetime'].dt.day\ntrain['hour'] = train['datetime'].dt.hour\ntest['year'] = test['datetime'].dt.year\ntest['month'] = test['datetime'].dt.month\ntest['day'] = test['datetime'].dt.day\ntest['hour'] = test['datetime'].dt.hour\n\ntrain = train.drop(['datetime',\"casual\",\"registered\"], axis = 1)\ntest = test.drop('datetime', axis = 1)\nprint(train.shape, test.shape) #(10886, 13) (6493, 12)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:54:21.578623Z","iopub.execute_input":"2024-06-15T05:54:21.579081Z","iopub.status.idle":"2024-06-15T05:54:21.620235Z","shell.execute_reply.started":"2024-06-15T05:54:21.579037Z","shell.execute_reply":"2024-06-15T05:54:21.618978Z"},"trusted":true},"execution_count":69,"outputs":[{"name":"stdout","text":"(10886, 13) (6493, 12)\n","output_type":"stream"}]},{"cell_type":"code","source":"target = train.pop(\"count\")","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:54:21.621640Z","iopub.execute_input":"2024-06-15T05:54:21.622003Z","iopub.status.idle":"2024-06-15T05:54:21.629096Z","shell.execute_reply.started":"2024-06-15T05:54:21.621970Z","shell.execute_reply":"2024-06-15T05:54:21.627685Z"},"trusted":true},"execution_count":70,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import MinMaxScaler\nmms = MinMaxScaler()\n\ntrain = mms.fit_transform(train)\ntest = mms.transform(test)","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:54:21.631876Z","iopub.execute_input":"2024-06-15T05:54:21.632376Z","iopub.status.idle":"2024-06-15T05:54:21.650296Z","shell.execute_reply.started":"2024-06-15T05:54:21.632338Z","shell.execute_reply":"2024-06-15T05:54:21.648686Z"},"trusted":true},"execution_count":71,"outputs":[]},{"cell_type":"code","source":"#train-test-split\nfrom sklearn.model_selection import train_test_split\nx_tr, x_val, y_tr, y_val = train_test_split(train, target, test_size = 0.2, random_state = 0)\n\nx_tr.shape, x_val.shape, y_tr.shape, y_val.shape #((8708, 9), (2178, 9), (8708,), (2178,))\n\n#randomforest\nfrom sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor()\n\nmodel.fit(x_tr, y_tr)\npred = model.predict(x_val)\npred\n\n#RMSLE\nfrom sklearn.metrics import mean_squared_log_error\n#help(mean_squared_log_error)\nrmsle = mean_squared_log_error(y_val, pred) ** 0.5 \nrmsle #0.3555302580938243\n#0.3554278738536407 : 스케일링 이후\n\n\npred = model.predict(test)\ntest = pd.read_csv(\"/kaggle/input/bike-sharing-demand/test.csv\")\n\nsubmit = pd.DataFrame({\n    'datetime': test['datetime'],\n    'count': pred\n}).to_csv(\"submission.csv\", index = False)\n\npd.read_csv(\"submission.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:56:29.651998Z","iopub.execute_input":"2024-06-15T05:56:29.652478Z","iopub.status.idle":"2024-06-15T05:56:33.183469Z","shell.execute_reply.started":"2024-06-15T05:56:29.652441Z","shell.execute_reply":"2024-06-15T05:56:33.182344Z"},"trusted":true},"execution_count":73,"outputs":[{"execution_count":73,"output_type":"execute_result","data":{"text/plain":"                 datetime   count\n0     2011-01-20 00:00:00   10.65\n1     2011-01-20 01:00:00    6.09\n2     2011-01-20 02:00:00    6.20\n3     2011-01-20 03:00:00    3.47\n4     2011-01-20 04:00:00    2.80\n...                   ...     ...\n6488  2012-12-31 19:00:00  319.60\n6489  2012-12-31 20:00:00  207.57\n6490  2012-12-31 21:00:00  149.64\n6491  2012-12-31 22:00:00  120.06\n6492  2012-12-31 23:00:00   77.01\n\n[6493 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>datetime</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2011-01-20 00:00:00</td>\n      <td>10.65</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2011-01-20 01:00:00</td>\n      <td>6.09</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2011-01-20 02:00:00</td>\n      <td>6.20</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2011-01-20 03:00:00</td>\n      <td>3.47</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2011-01-20 04:00:00</td>\n      <td>2.80</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>6488</th>\n      <td>2012-12-31 19:00:00</td>\n      <td>319.60</td>\n    </tr>\n    <tr>\n      <th>6489</th>\n      <td>2012-12-31 20:00:00</td>\n      <td>207.57</td>\n    </tr>\n    <tr>\n      <th>6490</th>\n      <td>2012-12-31 21:00:00</td>\n      <td>149.64</td>\n    </tr>\n    <tr>\n      <th>6491</th>\n      <td>2012-12-31 22:00:00</td>\n      <td>120.06</td>\n    </tr>\n    <tr>\n      <th>6492</th>\n      <td>2012-12-31 23:00:00</td>\n      <td>77.01</td>\n    </tr>\n  </tbody>\n</table>\n<p>6493 rows × 2 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## EDA","metadata":{}},{"cell_type":"code","source":"# 데이터 크기\ntrain.shape, test.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:53:49.013130Z","iopub.status.idle":"2024-06-15T05:53:49.013685Z","shell.execute_reply.started":"2024-06-15T05:53:49.013412Z","shell.execute_reply":"2024-06-15T05:53:49.013436Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 데이터 샘플\ntrain.head(2)","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:53:49.015375Z","iopub.status.idle":"2024-06-15T05:53:49.015840Z","shell.execute_reply.started":"2024-06-15T05:53:49.015594Z","shell.execute_reply":"2024-06-15T05:53:49.015637Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 데이터 샘플\ntest.head(2)","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:53:49.017197Z","iopub.status.idle":"2024-06-15T05:53:49.017631Z","shell.execute_reply.started":"2024-06-15T05:53:49.017408Z","shell.execute_reply":"2024-06-15T05:53:49.017427Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- casual, registered의 합이 count인 것을 확인할 수 있음 (test에는 없으므로 제거)","metadata":{}},{"cell_type":"code","source":"# 결측값 확인\ntrain.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:53:49.020746Z","iopub.status.idle":"2024-06-15T05:53:49.021186Z","shell.execute_reply.started":"2024-06-15T05:53:49.020970Z","shell.execute_reply":"2024-06-15T05:53:49.020991Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 결측값 확인\ntest.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:53:49.026299Z","iopub.execute_input":"2024-06-15T05:53:49.027270Z","iopub.status.idle":"2024-06-15T05:53:49.038886Z","shell.execute_reply.started":"2024-06-15T05:53:49.027208Z","shell.execute_reply":"2024-06-15T05:53:49.037660Z"},"trusted":true},"execution_count":59,"outputs":[{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"season        0\nholiday       0\nworkingday    0\nweather       0\ntemp          0\natemp         0\nhumidity      0\nwindspeed     0\nyear          0\nmonth         0\nday           0\nhour          0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train['count'].hist()","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:53:49.041325Z","iopub.execute_input":"2024-06-15T05:53:49.041863Z","iopub.status.idle":"2024-06-15T05:53:49.065930Z","shell.execute_reply.started":"2024-06-15T05:53:49.041816Z","shell.execute_reply":"2024-06-15T05:53:49.063908Z"},"trusted":true},"execution_count":60,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_27/426738356.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtrain\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'count'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mIndexError\u001b[0m: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices"],"ename":"IndexError","evalue":"only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices","output_type":"error"}]},{"cell_type":"markdown","source":"## 전처리","metadata":{}},{"cell_type":"code","source":"# datetime\n\ntrain['datetime'] = pd.to_datetime(train['datetime'])\ntest['datetime'] = pd.to_datetime(test['datetime'])\n\ntrain['year'] = train['datetime'].dt.year\ntrain['month'] = train['datetime'].dt.month\ntrain['day'] = train['datetime'].dt.day\n\ntest['year'] = test['datetime'].dt.year\ntest['month'] = test['datetime'].dt.month\ntest['day'] = test['datetime'].dt.day\n\ntrain = train.drop('datetime', axis=1)\ntest = test.drop('datetime', axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:53:49.073787Z","iopub.execute_input":"2024-06-15T05:53:49.074194Z","iopub.status.idle":"2024-06-15T05:53:49.100124Z","shell.execute_reply.started":"2024-06-15T05:53:49.074158Z","shell.execute_reply":"2024-06-15T05:53:49.098590Z"},"trusted":true},"execution_count":61,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_27/873546284.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# datetime\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mtrain\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'datetime'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_datetime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'datetime'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'datetime'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_datetime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'datetime'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices"],"ename":"IndexError","evalue":"only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices","output_type":"error"}]},{"cell_type":"code","source":"# test에는 없는 컬럼 삭제\ntrain = train.drop(['casual', 'registered'], axis=1)\ntrain.head(1)","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:53:49.105067Z","iopub.execute_input":"2024-06-15T05:53:49.105860Z","iopub.status.idle":"2024-06-15T05:53:49.128202Z","shell.execute_reply.started":"2024-06-15T05:53:49.105813Z","shell.execute_reply":"2024-06-15T05:53:49.126463Z"},"trusted":true},"execution_count":62,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_27/2927971819.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# test에는 없는 컬럼 삭제\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mtrain\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'casual'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'registered'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'drop'"],"ename":"AttributeError","evalue":"'numpy.ndarray' object has no attribute 'drop'","output_type":"error"}]},{"cell_type":"code","source":"# target 별도 저장\ntarget = train.pop('count')\ntarget","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:53:49.137153Z","iopub.execute_input":"2024-06-15T05:53:49.137585Z","iopub.status.idle":"2024-06-15T05:53:49.161645Z","shell.execute_reply.started":"2024-06-15T05:53:49.137550Z","shell.execute_reply":"2024-06-15T05:53:49.159505Z"},"trusted":true},"execution_count":63,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_27/3018070204.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# target 별도 저장\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mtarget\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'count'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'pop'"],"ename":"AttributeError","evalue":"'numpy.ndarray' object has no attribute 'pop'","output_type":"error"}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(train, target, test_size=0.2, random_state=2023)\nX_train.shape, X_val.shape, y_train.shape, y_val.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:53:49.162940Z","iopub.status.idle":"2024-06-15T05:53:49.163458Z","shell.execute_reply.started":"2024-06-15T05:53:49.163176Z","shell.execute_reply":"2024-06-15T05:53:49.163197Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 선형회귀 모델","metadata":{}},{"cell_type":"code","source":"# 평가\nfrom sklearn.metrics import r2_score","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:53:49.165538Z","iopub.status.idle":"2024-06-15T05:53:49.166022Z","shell.execute_reply.started":"2024-06-15T05:53:49.165809Z","shell.execute_reply":"2024-06-15T05:53:49.165830Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train, y_train)\npred = lr.predict(X_val)\nr2_score(y_val, pred)","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:53:49.174467Z","iopub.execute_input":"2024-06-15T05:53:49.175240Z","iopub.status.idle":"2024-06-15T05:53:49.198873Z","shell.execute_reply.started":"2024-06-15T05:53:49.175199Z","shell.execute_reply":"2024-06-15T05:53:49.196797Z"},"trusted":true},"execution_count":64,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_27/2723792990.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinear_model\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mLinearRegression\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mlr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLinearRegression\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mlr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mpred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_val\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mr2_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'X_train' is not defined"],"ename":"NameError","evalue":"name 'X_train' is not defined","output_type":"error"}]},{"cell_type":"markdown","source":"## 랜덤포레스트","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()\nrf.fit(X_train, y_train)\npred = rf.predict(X_val)\nr2_score(y_val, pred)","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:53:49.200124Z","iopub.status.idle":"2024-06-15T05:53:49.200631Z","shell.execute_reply.started":"2024-06-15T05:53:49.200375Z","shell.execute_reply":"2024-06-15T05:53:49.200396Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## XGBoost 모델","metadata":{}},{"cell_type":"code","source":"from xgboost import XGBRegressor\nxgb = XGBRegressor()\nxgb.fit(X_train, y_train)\npred = xgb.predict(X_val)\nr2_score(y_val, pred)","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:53:49.202380Z","iopub.status.idle":"2024-06-15T05:53:49.202958Z","shell.execute_reply.started":"2024-06-15T05:53:49.202664Z","shell.execute_reply":"2024-06-15T05:53:49.202691Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 하이퍼파라미터 \nfrom xgboost import XGBRegressor\nxgb = XGBRegressor(n_estimators=500, learning_rate=0.01, max_depth=9)\nxgb.fit(X_train, y_train)\npred = xgb.predict(X_val)\nr2_score(y_val, pred)","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:53:49.207490Z","iopub.status.idle":"2024-06-15T05:53:49.208810Z","shell.execute_reply.started":"2024-06-15T05:53:49.208500Z","shell.execute_reply":"2024-06-15T05:53:49.208543Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## test 데이터 예측","metadata":{}},{"cell_type":"code","source":"# 예측\npred = xgb.predict(test)\npred","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:53:49.222114Z","iopub.execute_input":"2024-06-15T05:53:49.222539Z","iopub.status.idle":"2024-06-15T05:53:49.243776Z","shell.execute_reply.started":"2024-06-15T05:53:49.222483Z","shell.execute_reply":"2024-06-15T05:53:49.242093Z"},"trusted":true},"execution_count":65,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_27/1632258980.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# 예측\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mpred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxgb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mpred\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'xgb' is not defined"],"ename":"NameError","evalue":"name 'xgb' is not defined","output_type":"error"}]},{"cell_type":"code","source":"# csv 파일 생성\ntest = pd.read_csv(\"/kaggle/input/bike-sharing-demand/test.csv\")\n\nsubmit = pd.DataFrame({\n    'datetime': test['datetime'],\n    'count': pred\n})\nsubmit.to_csv(\"submission.csv\", index=False)","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:53:49.245023Z","iopub.status.idle":"2024-06-15T05:53:49.245794Z","shell.execute_reply.started":"2024-06-15T05:53:49.245452Z","shell.execute_reply":"2024-06-15T05:53:49.245481Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 점검\nprint(pd.read_csv(\"submission.csv\"))\nprint(submit.shape, test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-06-15T05:53:49.251792Z","iopub.execute_input":"2024-06-15T05:53:49.252256Z","iopub.status.idle":"2024-06-15T05:53:49.289661Z","shell.execute_reply.started":"2024-06-15T05:53:49.252207Z","shell.execute_reply":"2024-06-15T05:53:49.287838Z"},"trusted":true},"execution_count":66,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_27/156910942.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# 점검\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"submission.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msubmit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    309\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m                 )\n\u001b[0;32m--> 311\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)\u001b[0m\n\u001b[1;32m    584\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    585\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 586\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    587\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    480\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    481\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 482\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    483\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    484\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    809\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    810\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 811\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    812\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    813\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1038\u001b[0m             )\n\u001b[1;32m   1039\u001b[0m         \u001b[0;31m# error: Too many arguments for \"ParserBase\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1040\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmapping\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1041\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1042\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_failover_to_python\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/io/parsers/c_parser_wrapper.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m         \u001b[0;31m# open handles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open_handles\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/io/parsers/base_parser.py\u001b[0m in \u001b[0;36m_open_handles\u001b[0;34m(self, src, kwds)\u001b[0m\n\u001b[1;32m    227\u001b[0m             \u001b[0mmemory_map\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"memory_map\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    228\u001b[0m             \u001b[0mstorage_options\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"storage_options\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 229\u001b[0;31m             \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"encoding_errors\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"strict\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    230\u001b[0m         )\n\u001b[1;32m    231\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    705\u001b[0m                 \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    706\u001b[0m                 \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 707\u001b[0;31m                 \u001b[0mnewline\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    708\u001b[0m             )\n\u001b[1;32m    709\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'submission.csv'"],"ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: 'submission.csv'","output_type":"error"}]}]}